import express from 'express';
import crypto from 'crypto';
import Users from '../models/users.js'; // Adjust the path to your Users model
import nodemailer from 'nodemailer';

const router = express.Router();

// Route to request a password reset
router.post('/request-reset', async (req, res) => {
  const { email } = req.body;

  try {
    // Find user by email
    const user = await Users.findOne({ where: { email } });
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    // Generate and save reset token
    const resetToken = user.generatePasswordResetToken();
    await user.save();

    // Send email with reset link
    const transporter = nodemailer.createTransport({
      service: 'gmail', // Use your email service
      auth: {
        user: process.env.EMAIL, // Your email
        pass: process.env.EMAIL_PASSWORD, // Your email password or app password
      },
    });

    const resetURL = `${req.protocol}://${req.get('host')}/reset-password/${resetToken}`;
    const message = `You requested a password reset. Click this link to reset your password: ${resetURL}`;

    await transporter.sendMail({
      to: email,
      subject: 'Password Reset Request',
      text: message,
    });

    res.status(200).json({ message: 'Password reset email sent.' });
  } catch (error) {
    console.error('Error requesting password reset:', error);
    res.status(500).json({ message: 'Something went wrong.', error });
  }
});

// Route to reset the password
router.post('/reset-password/:token', async (req, res) => {
  const { token } = req.params;
  const { newPassword } = req.body;

  try {
    // Find user by token and validate
    const user = await Users.findOne({
      where: {
        resetPasswordToken: crypto.createHash('sha256').update(token).digest('hex'),
        resetPasswordExpires: { [Op.gt]: new Date() }, // Ensure token is not expired
      },
    });

    if (!user) {
      return res.status(400).json({ message: 'Invalid or expired token.' });
    }

    // Update password
    await user.hashPassword(newPassword);
    user.resetPasswordToken = null; // Clear the token
    user.resetPasswordExpires = null; // Clear the expiration
    await user.save();

    res.status(200).json({ message: 'Password reset successful.' });
  } catch (error) {
    console.error('Error resetting password:', error);
    res.status(500).json({ message: 'Something went wrong.', error });
  }
});

export default router;
